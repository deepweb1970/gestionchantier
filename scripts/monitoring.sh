#!/bin/bash

# Script de monitoring de l'application
# Usage: ./monitoring.sh [check|status|logs|restart]

set -e

APP_NAME="gestion-chantier"
APP_DIR="/var/www/gestion-chantier"
LOG_DIR="/var/log/nginx"

# Fonction de logging avec couleurs
log() {
    local level=$1
    shift
    local message="$@"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case $level in
        "INFO")  echo -e "\033[0;32m[$timestamp] INFO: $message\033[0m" ;;
        "WARN")  echo -e "\033[0;33m[$timestamp] WARN: $message\033[0m" ;;
        "ERROR") echo -e "\033[0;31m[$timestamp] ERROR: $message\033[0m" ;;
        *)       echo "[$timestamp] $level: $message" ;;
    esac
}

# Fonction de v√©rification de l'√©tat des services
check_services() {
    log "INFO" "üîç V√©rification de l'√©tat des services..."
    
    # Nginx
    if systemctl is-active --quiet nginx; then
        log "INFO" "‚úÖ Nginx: Actif"
    else
        log "ERROR" "‚ùå Nginx: Inactif"
        return 1
    fi
    
    # PM2 (si utilis√©)
    if command -v pm2 &> /dev/null; then
        if pm2 list | grep -q "$APP_NAME"; then
            local status=$(pm2 jlist | jq -r ".[] | select(.name==\"$APP_NAME\") | .pm2_env.status")
            if [ "$status" = "online" ]; then
                log "INFO" "‚úÖ PM2 ($APP_NAME): En ligne"
            else
                log "ERROR" "‚ùå PM2 ($APP_NAME): $status"
                return 1
            fi
        else
            log "WARN" "‚ö†Ô∏è PM2: Application $APP_NAME non trouv√©e"
        fi
    fi
    
    # V√©rification HTTP
    if curl -s -o /dev/null -w "%{http_code}" http://localhost | grep -q "200\|301\|302"; then
        log "INFO" "‚úÖ HTTP: R√©ponse OK"
    else
        log "ERROR" "‚ùå HTTP: Pas de r√©ponse"
        return 1
    fi
    
    return 0
}

# Fonction de v√©rification des ressources syst√®me
check_resources() {
    log "INFO" "üìä V√©rification des ressources syst√®me..."
    
    # Utilisation CPU
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | awk -F'%' '{print $1}')
    if (( $(echo "$cpu_usage > 80" | bc -l) )); then
        log "WARN" "‚ö†Ô∏è CPU: ${cpu_usage}% (√©lev√©)"
    else
        log "INFO" "‚úÖ CPU: ${cpu_usage}%"
    fi
    
    # Utilisation m√©moire
    local mem_usage=$(free | grep Mem | awk '{printf "%.1f", $3/$2 * 100.0}')
    if (( $(echo "$mem_usage > 80" | bc -l) )); then
        log "WARN" "‚ö†Ô∏è M√©moire: ${mem_usage}% (√©lev√©e)"
    else
        log "INFO" "‚úÖ M√©moire: ${mem_usage}%"
    fi
    
    # Espace disque
    local disk_usage=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
    if [ "$disk_usage" -gt 80 ]; then
        log "WARN" "‚ö†Ô∏è Disque: ${disk_usage}% (√©lev√©)"
    else
        log "INFO" "‚úÖ Disque: ${disk_usage}%"
    fi
    
    # Charge syst√®me
    local load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
    local cpu_cores=$(nproc)
    if (( $(echo "$load_avg > $cpu_cores" | bc -l) )); then
        log "WARN" "‚ö†Ô∏è Charge: $load_avg (√©lev√©e pour $cpu_cores cores)"
    else
        log "INFO" "‚úÖ Charge: $load_avg"
    fi
}

# Fonction de v√©rification des logs d'erreur
check_logs() {
    log "INFO" "üìã V√©rification des logs d'erreur r√©cents..."
    
    # Logs Nginx
    if [ -f "$LOG_DIR/error.log" ]; then
        local nginx_errors=$(tail -n 100 $LOG_DIR/error.log | grep "$(date '+%Y/%m/%d')" | wc -l)
        if [ "$nginx_errors" -gt 10 ]; then
            log "WARN" "‚ö†Ô∏è Nginx: $nginx_errors erreurs aujourd'hui"
        else
            log "INFO" "‚úÖ Nginx: $nginx_errors erreurs aujourd'hui"
        fi
    fi
    
    # Logs syst√®me
    local system_errors=$(journalctl --since "1 hour ago" --priority=err | wc -l)
    if [ "$system_errors" -gt 5 ]; then
        log "WARN" "‚ö†Ô∏è Syst√®me: $system_errors erreurs dans la derni√®re heure"
    else
        log "INFO" "‚úÖ Syst√®me: $system_errors erreurs dans la derni√®re heure"
    fi
}

# Fonction de v√©rification de la connectivit√©
check_connectivity() {
    log "INFO" "üåê V√©rification de la connectivit√©..."
    
    # Test de connectivit√© internet
    if ping -c 1 8.8.8.8 &> /dev/null; then
        log "INFO" "‚úÖ Internet: Connect√©"
    else
        log "ERROR" "‚ùå Internet: D√©connect√©"
        return 1
    fi
    
    # Test Supabase (si configur√©)
    if [ -f "$APP_DIR/.env" ]; then
        local supabase_url=$(grep VITE_SUPABASE_URL $APP_DIR/.env | cut -d'=' -f2)
        if [ -n "$supabase_url" ]; then
            if curl -s --max-time 10 "$supabase_url/rest/v1/" &> /dev/null; then
                log "INFO" "‚úÖ Supabase: Accessible"
            else
                log "WARN" "‚ö†Ô∏è Supabase: Inaccessible"
            fi
        fi
    fi
}

# Fonction d'affichage du statut complet
show_status() {
    echo "üöÄ === STATUT DE L'APPLICATION $APP_NAME ==="
    echo ""
    
    check_services
    echo ""
    check_resources
    echo ""
    check_connectivity
    echo ""
    check_logs
    echo ""
    
    # Informations suppl√©mentaires
    log "INFO" "üìà Uptime: $(uptime -p)"
    log "INFO" "üïí Derni√®re sauvegarde: $(ls -t /backup/gestion-chantier/app_*.tar.gz 2>/dev/null | head -n1 | xargs ls -l 2>/dev/null | awk '{print $6, $7, $8}' || echo 'Aucune')"
    
    if [ -f "$APP_DIR/.env" ]; then
        log "INFO" "‚öôÔ∏è Configuration: Pr√©sente"
    else
        log "WARN" "‚ö†Ô∏è Configuration: Fichier .env manquant"
    fi
}

# Fonction d'affichage des logs en temps r√©el
show_logs() {
    echo "üìã === LOGS EN TEMPS R√âEL ==="
    echo "Appuyez sur Ctrl+C pour arr√™ter"
    echo ""
    
    # Logs multiples en parall√®le
    tail -f $LOG_DIR/access.log $LOG_DIR/error.log 2>/dev/null | while read line; do
        echo "[$(date '+%H:%M:%S')] $line"
    done
}

# Fonction de red√©marrage des services
restart_services() {
    log "INFO" "üîÑ Red√©marrage des services..."
    
    # Test de la configuration avant red√©marrage
    if ! nginx -t; then
        log "ERROR" "‚ùå Configuration Nginx invalide, annulation du red√©marrage"
        return 1
    fi
    
    # Red√©marrage Nginx
    if systemctl restart nginx; then
        log "INFO" "‚úÖ Nginx red√©marr√©"
    else
        log "ERROR" "‚ùå √âchec du red√©marrage de Nginx"
        return 1
    fi
    
    # Red√©marrage PM2 (si utilis√©)
    if command -v pm2 &> /dev/null && pm2 list | grep -q "$APP_NAME"; then
        if pm2 restart $APP_NAME; then
            log "INFO" "‚úÖ PM2 ($APP_NAME) red√©marr√©"
        else
            log "ERROR" "‚ùå √âchec du red√©marrage de PM2"
            return 1
        fi
    fi
    
    # Attendre et v√©rifier
    sleep 5
    if check_services; then
        log "INFO" "‚úÖ Tous les services sont op√©rationnels"
    else
        log "ERROR" "‚ùå Probl√®me d√©tect√© apr√®s red√©marrage"
        return 1
    fi
}

# Fonction de v√©rification compl√®te
full_check() {
    echo "üîç === V√âRIFICATION COMPL√àTE ==="
    echo ""
    
    local errors=0
    
    if ! check_services; then
        ((errors++))
    fi
    
    check_resources
    check_connectivity
    check_logs
    
    echo ""
    if [ $errors -eq 0 ]; then
        log "INFO" "‚úÖ Syst√®me op√©rationnel"
        exit 0
    else
        log "ERROR" "‚ùå $errors probl√®me(s) d√©tect√©(s)"
        exit 1
    fi
}

# Menu principal
case ${1:-status} in
    "check")
        full_check
        ;;
    "status")
        show_status
        ;;
    "logs")
        show_logs
        ;;
    "restart")
        restart_services
        ;;
    "help"|"-h"|"--help")
        echo "Usage: $0 [check|status|logs|restart]"
        echo ""
        echo "Commandes:"
        echo "  check   - V√©rification compl√®te avec code de sortie"
        echo "  status  - Affichage du statut d√©taill√© (d√©faut)"
        echo "  logs    - Affichage des logs en temps r√©el"
        echo "  restart - Red√©marrage des services"
        echo "  help    - Affichage de cette aide"
        ;;
    *)
        echo "‚ùå Commande inconnue: $1"
        echo "Utilisez '$0 help' pour voir les commandes disponibles"
        exit 1
        ;;
esac